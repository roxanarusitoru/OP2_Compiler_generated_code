//
// auto-generated by op2.m on 30-May-2011 22:03:11
//

// user function

//#include "bres_calc.h"

// host stub function

long max(long a, long b) {
  if (a >= b) {
    return a;
  }
  return b;
}
void op_par_loop_bres_calc(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_tuner* OP_tuner){


  int    nargs   = 6;
  op_arg args[6] = {arg0,arg1,arg2,arg3,arg4,arg5};

  int    ninds   = 4;
  int    inds[6] = {0,0,1,2,3,-1};


  cl_int ciErrNum;
  cl_event ceEvent;

  if (OP_diags>2) {
    printf(" kernel routine with indirection: bres_calc \n");
  }

  // initialise tuner
  
  op_tuner* global_tuner = op_get_global_tuner();

  // get plan

  int part_size = 0;

  #ifdef OP_PART_SIZE_3
    part_size = OP_PART_SIZE_3;
  #else
    if(OP_tuner != NULL && OP_tuner->active && OP_tuner->part_size != 0) {
      part_size = OP_tuner->part_size;
    } else if(global_tuner->active && global_tuner->part_size) {
      part_size = global_tuner->part_size;
    } else {
      part_size = OP_part_size;
    }
  #endif

 for(int m = 0; m < 6; ++m) {
    //printf("arg[%d].argtype: %d\n", m, args[m].argtype);
        printf("arg[%d].dim: %d\n", m, args[m].dim);
            printf("arg[%d].idx: %d\n", m, args[m].idx);
                printf("arg[%d].size: %d\n", m, args[m].size);
                  }
   
 
  //printf("bres part_size %d\n", part_size);
  //printf("BRES_CALC name: %s\n", name);
  //printf("BRES_CALC set: %s\n", set->name);
  //printf("BRES_CALC part_size: %d\n", part_size);
  //printf("BRES_CALC nargs: %d\n", nargs);
  //printf("BRES_CALC ninds: %d\n", ninds);
  //for(int m = 0; m < 1; ++m) {
  //  printf("ARG[%d] size = %d\n", m, args[m].size); 
  //}  
  //for(int m = 0; m < nargs; ++m) {
  //  printf("inds[%d] = %d\n", m, inds[m]);
  //}
  
  /*for(int m = 5; m < 6; ++m) {
    op_fetch_data(args[m].dat);
    float * array = (float *) args[m].dat->data;
    for(int n = 0; n < args[m].dat->set->size*args[m].dat->dim; ++n) {
      printf("%f\n", array[n]);
    }
  }*/
  /*for(int m = 5; m < 6; ++m) {
    int * mapping = args[m].map->map;
    long size = max(args[m].map->to->size, args[m].map->from->size);
    //for(int n = 0; n < args[m].map->from->size * args[m].map->dim; ++n) {
    for(int n = 0; n < args[m].map->from->size; ++n) {
      printf("%d\n", mapping[n]);
    }
  }*/

  op_plan *Plan = op_plan_get(name,set,part_size,nargs,args,ninds,inds);

  int match = 0;
  if(strcmp ( name, Plan->name) == 0
      && (set == Plan->set)
      && (part_size == Plan->part_size)
      && (nargs == Plan->nargs)
      && (ninds == Plan->ninds)) {
    match = 1;
  }

  if(match) {
    for(int m = 0; m < 6; ++m) {
      match = match && (args[m].dat == Plan->dats[m])
        && (args[m].map == Plan->maps[m])
        && (args[m].idx == Plan->idxs[m])
        && (args[m].acc == Plan->accs[m]);
    }
    
/*    for(int m = 0; m < 6; ++m) {
      printf("dat[%d].idx = %d\n", m, args[m].idx);
      printf("dat[%d].acc = %d\n", m, args[m].acc);
      printf("plan->nindirect[%d] = %d\n", m, Plan->nindirect[m]);
    }
   // printf("MATCH: %d\n", match);
    for(int m = 0; m < 1; ++m) {
      for(int n = 0; n < Plan->nindirect[m]; ++n) {
        printf("%d\n", Plan->ind_maps[m][n]);
      }
    }*/
    printf("SIZE OF INT: %d\n", sizeof(int));
  } else {
    printf("User set parameters of the plan function are different from those returned in the plan.\n");
  }


  // initialise timers

  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timers(&cpu_t1, &wall_t1);

  // execute plan

  int block_offset = 0;

  //cl_kernel hKernel = compileKernel( bres_calc_src, "op_cuda_bres_calc" );
  cl_kernel hKernel = getKernel( "op_cuda_bres_calc" );

  for (int col=0; col < Plan->ncolors; col++) {
  
  size_t nthread = 0;

  #ifdef OP_BLOCK_SIZE_3
    nthread = OP_BLOCK_SIZE_3;
  #else
    //printf("In the main else branch\n");
    if(OP_tuner != NULL && OP_tuner->active) {
      nthread = OP_tuner->block_size;
      //printf("OP_tuner value nthread %d\n", nthread);
    } else {
      //printf("in the global_tuner test %d\n", global_tuner->block_size);
      if(global_tuner->active && (global_tuner->block_size != 0)) {
        nthread = global_tuner->block_size;
        //printf("global_tuner value nthread %d\n", nthread);
      } else {
        nthread = OP_block_size;
        //printf("default value nthread %d\n", nthread);
      }
    } 
  #endif

    const size_t nblocks = Plan->ncolblk[col];
    const size_t n_tot_thread = nblocks * nthread;

    const size_t nshared = Plan->nshared;

    printf("nshared %d, nblocks %d\n", nshared, nblocks);


    LOG( LOG_INFO, "calling kernel... " );

    ciErrNum = CL_SUCCESS;
    int i = 0;
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(cl_mem), &(arg0.data_d));
    //for(long i = 0; i < 2*721801; ++i) {
    //  printf("%f\n", arg0.data[i]);
    //}
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(cl_mem), &Plan->ind_maps[0]);
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(cl_mem), &(arg2.data_d));
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(cl_mem), &Plan->ind_maps[1]);
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(cl_mem), &(arg3.data_d));
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(cl_mem), &Plan->ind_maps[2]);
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(cl_mem), &(arg4.data_d));
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(cl_mem), &Plan->ind_maps[3]);
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(cl_mem), &Plan->loc_maps[0]);
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(cl_mem), &Plan->loc_maps[1]);
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(cl_mem), &Plan->loc_maps[2]);
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(cl_mem), &Plan->loc_maps[3]);
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(cl_mem), &Plan->loc_maps[4]);
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(cl_mem), &arg5.data_d);
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(cl_mem), &Plan->ind_sizes);
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(cl_mem), &Plan->ind_offs);
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(int), &block_offset);
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(cl_mem), &Plan->blkmap);
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(cl_mem), &Plan->offset);
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(cl_mem), &Plan->nelems);
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(cl_mem), &Plan->nthrcol);
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(cl_mem), &Plan->thrcol);
    ciErrNum |= clSetKernelArg(hKernel, i++, nshared, NULL );
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(cl_mem), &g_const_d);
    assert_m( ciErrNum == CL_SUCCESS, "error setting kernel arguments" );

    ciErrNum = clEnqueueNDRangeKernel( cqCommandQueue, hKernel, 1, NULL, &n_tot_thread, &nthread, 0, NULL, &ceEvent );
    assert_m( ciErrNum == CL_SUCCESS, "error executing kernel bres" );

#ifndef ASYNC
    ciErrNum = clFinish( cqCommandQueue );
    assert_m( ciErrNum == CL_SUCCESS, "error completing device commands" );

#ifdef PROFILE
    cl_ulong tqueue, tsubmit, tstart, tend, telapsed;
    ciErrNum = clGetEventProfilingInfo( ceEvent, CL_PROFILING_COMMAND_QUEUED, sizeof(cl_ulong), &tqueue, NULL );
    ciErrNum |= clGetEventProfilingInfo( ceEvent, CL_PROFILING_COMMAND_SUBMIT, sizeof(cl_ulong), &tsubmit, NULL );
    ciErrNum |= clGetEventProfilingInfo( ceEvent, CL_PROFILING_COMMAND_START, sizeof(cl_ulong), &tstart, NULL );
    ciErrNum |= clGetEventProfilingInfo( ceEvent, CL_PROFILING_COMMAND_END, sizeof(cl_ulong), &tend, NULL );
    assert_m( ciErrNum == CL_SUCCESS, "error getting profiling info" );
    OP_kernels[3].queue_time      += (tsubmit - tqueue);
    OP_kernels[3].wait_time       += (tstart - tsubmit);
    OP_kernels[3].execution_time  += (tend - tstart);
#endif
#endif

    LOG( LOG_INFO, "OK\n" );


    block_offset += nblocks;
  }

  // update kernel record

  op_timers(&cpu_t2, &wall_t2);
  op_timing_realloc(3);
  OP_kernels[3].name      = name;
  OP_kernels[3].count    += 1;
  OP_kernels[3].time     += wall_t2 - wall_t1;
  OP_kernels[3].transfer  += Plan->transfer;
  OP_kernels[3].transfer2 += Plan->transfer2;
}


