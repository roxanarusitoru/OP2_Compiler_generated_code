//
// auto-generated by op2.m on 30-May-2011 22:03:11
//

// user function

//#include "adt_calc.h"


// host stub function

void op_par_loop_adt_calc(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_tuner* OP_tuner){



  cl_int ciErrNum;
  cl_event ceEvent;

  int    nargs   = 6;
  op_arg args[6] = {arg0,arg1,arg2,arg3,arg4,arg5};

  int    ninds   = 1;
  int    inds[6] = {0,0,0,0,-1,-1};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: adt_calc \n");
  }

  // initialise tuner
 
  op_tuner* global_tuner = op_get_global_tuner();

  // get plan

  int part_size = 0;
  #ifdef OP_PART_SIZE_1
    part_size = OP_PART_SIZE_1;
  #else
    if(OP_tuner != NULL && OP_tuner->active && OP_tuner->part_size) {
      part_size = OP_tuner->part_size;
    } else if(global_tuner->active && global_tuner->part_size) {
      part_size = global_tuner->part_size;
    } else {
      part_size = OP_part_size;
    }
  #endif
  //printf("ADT_CALC name: %s\n", name);
  //printf("ADT_CALC set: %d\n", set);
  //printf("ADT_CALC part_size: %d\n", part_size);
  //printf("ADT_CALC nargs: %d\n", nargs);  
  //printf("ADT_CALC ninds: %d\n", ninds);
//  printf("adt part_size %d\n", part_size);
  op_plan *Plan = op_plan_get(name,set,part_size,nargs,args,ninds,inds);


  // initialise timers

  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timers(&cpu_t1, &wall_t1);

  // execute plan

  int block_offset = 0;



  for (int col=0; col < Plan->ncolors; col++) {
  
  size_t nthread = 0;

  #ifdef OP_BLOCK_SIZE_1
    nthread = OP_BLOCK_SIZE_1;
  #else
    //printf("In the main else branch\n");
    if(OP_tuner != NULL && OP_tuner->active) {
      nthread = OP_tuner->block_size;
      //printf("OP_tuner value nthread %d\n", nthread);
    } else {
      //printf("in the global_tuner test %d\n", global_tuner->block_size);
      if(global_tuner->active && (global_tuner->block_size != 0)) {
        nthread = global_tuner->block_size;
        //printf("global_tuner value nthread %d\n", nthread);
      } else {
        nthread = OP_block_size;
        //printf("default value nthread %d\n", nthread);
      }
    }
  #endif
    //printf("ADT_CALC nthread %d\n", nthread);
    const size_t  nblocks = Plan->ncolblk[col]; 
    const size_t n_tot_thread = nblocks * nthread;
   
    int nshared = Plan->nshared;
    //printf("ADT_CALC shared %d\n", nshared);
    
    cl_kernel hKernel = getKernel( "op_cuda_adt_calc" );

  //printf("ADT block size %d \n", nthread);
  //printf("ADT part size %d \n", part_size);
    int i = 0;
    ciErrNum = clSetKernelArg(hKernel, i++, sizeof(cl_mem), &(arg0.data_d));
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(cl_mem), &Plan->ind_maps[0]);
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(cl_mem), &Plan->loc_maps[0]);
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(cl_mem), &Plan->loc_maps[1]);
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(cl_mem), &Plan->loc_maps[2]);
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(cl_mem), &Plan->loc_maps[3]);
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(cl_mem), &arg4.data_d);
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(cl_mem), &arg5.data_d);
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(cl_mem), &Plan->ind_sizes);
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(cl_mem), &Plan->ind_offs);
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(int), &block_offset);
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(cl_mem), &Plan->blkmap);
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(cl_mem), &Plan->offset);
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(cl_mem), &Plan->nelems);
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(cl_mem), &Plan->nthrcol);
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(cl_mem), &Plan->thrcol);
    ciErrNum |= clSetKernelArg(hKernel, i++, nshared, NULL );
    ciErrNum |= clSetKernelArg(hKernel, i++, sizeof(cl_mem), &g_const_d);
    assert_m( ciErrNum == CL_SUCCESS, "error setting kernel arguments" );


    ciErrNum = clEnqueueNDRangeKernel( cqCommandQueue, hKernel, 1, NULL, &n_tot_thread, &nthread, 0, NULL, &ceEvent );
    //ciErrNum = clEnqueueNDRangeKernel( cqCommandQueue, hKernel, 1, NULL, &n_tot_thread, NULL, 0, NULL, NULL );
    assert_m( ciErrNum == CL_SUCCESS, "error executing kernel adt" );

#ifndef ASYNC
    ciErrNum = clFinish( cqCommandQueue );
    assert_m( ciErrNum == CL_SUCCESS, "error completing device commands" );

#ifdef PROFILE
    cl_ulong tqueue, tsubmit, tstart, tend, telapsed;
    ciErrNum = clGetEventProfilingInfo( ceEvent, CL_PROFILING_COMMAND_QUEUED, sizeof(cl_ulong), &tqueue, NULL );
    ciErrNum |= clGetEventProfilingInfo( ceEvent, CL_PROFILING_COMMAND_SUBMIT, sizeof(cl_ulong), &tsubmit, NULL );
    ciErrNum |= clGetEventProfilingInfo( ceEvent, CL_PROFILING_COMMAND_START, sizeof(cl_ulong), &tstart, NULL );
    ciErrNum |= clGetEventProfilingInfo( ceEvent, CL_PROFILING_COMMAND_END, sizeof(cl_ulong), &tend, NULL );
    assert_m( ciErrNum == CL_SUCCESS, "error getting profiling info" );
    OP_kernels[1].queue_time      += (tsubmit - tqueue);
    OP_kernels[1].wait_time       += (tstart - tsubmit);
    OP_kernels[1].execution_time  += (tend - tstart);
#endif
#endif

    block_offset += nblocks;
  }

  // update kernel record

  op_timers(&cpu_t2, &wall_t2);
  op_timing_realloc(1);
  OP_kernels[1].name      = name;
  OP_kernels[1].count    += 1;
  OP_kernels[1].time     += wall_t2 - wall_t1;
  OP_kernels[1].transfer  += Plan->transfer;
  OP_kernels[1].transfer2 += Plan->transfer2;
}


